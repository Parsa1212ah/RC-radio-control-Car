;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22/02/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;unsigned char a,i=0;
;char rx_data[20];
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022  a=rx_data[i]=UDR;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0023  i++;
;PCODE: $00000015 VOL: 0
; 0000 0024 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;PCODE: $00000019 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $0000001A VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $0000001B VOL: 0
	.EQU __se_bit=0x80
;PCODE: $0000001C VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $0000001D VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $0000001E VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $0000001F VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000020 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000021 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000022 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000023 VOL: 0
	#endif
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;// SPI functions
;#include <spi.h>
;
;void main(void)
; 0000 002D {
;PCODE: $00000026 VOL: 0
; 0000 002E // Declare your local variables here
; 0000 002F DDRA=0xFF;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0030 DDRB=0xFF;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0031 DDRC=0xFF;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032 DDRD=0xFF;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0033 
; 0000 0034 // USART initialization
; 0000 0035 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0036 // USART Receiver: On
; 0000 0037 // USART Transmitter: On
; 0000 0038 // USART Mode: Asynchronous
; 0000 0039 // USART Baud Rate: 9600
; 0000 003A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003B UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003C UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003D UBRRH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003E UBRRL=0x33;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003F 
; 0000 0040 // ADC initialization
; 0000 0041 // ADC disabled
; 0000 0042 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0043 
; 0000 0044 // SPI initialization
; 0000 0045 // SPI Type: Master
; 0000 0046 // SPI Clock Rate: 2000/000 kHz
; 0000 0047 // SPI Clock Phase: Cycle Start
; 0000 0048 // SPI Clock Polarity: Low
; 0000 0049 // SPI Data Order: MSB First
; 0000 004A SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004B SPSR=(0<<SPI2X);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004C 
; 0000 004D 
; 0000 004E // Global enable interrupts
; 0000 004F #asm("sei")
;PCODE: $0000003F VOL: 0
	sei
;PCODE: $00000040 VOL: 0
; 0000 0050 
; 0000 0051 while (1)
;PCODE: $00000041 VOL: 0
; 0000 0052  {
; 0000 0053  PORTA.6=1;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0054  delay_ms(200);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0055  PORTA.6=0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0056  delay_ms(200);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0057 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0058 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
